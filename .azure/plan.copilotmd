# Azure Deployment Plan for LearnerCenter Project

## **Goal**
Deploy the LearnerCenter .NET 9.0 API backend and React TypeScript frontend to Azure Container Apps with Azure SQL Database for production use.

## **Project Information**

**LearnerCenter Application**
- **Frontend**: React 18 TypeScript SPA with Material-UI components
- **Backend**: .NET 9.0 Web API with Entity Framework Core
- **Database**: SQL Server with Entity Framework migrations
- **Architecture**: Multi-tier web application with REST API
- **Authentication**: User registration and login system
- **Features**: Campus enrollment, course management, user profiles
- **Containerization**: Will use Docker containers for both frontend and backend

## **Azure Resources Architecture**

> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    subgraph "Azure Resource Group"
        subgraph "Container Apps Environment"
            FE[React Frontend<br/>Container App]
            BE[.NET API Backend<br/>Container App]
        end
        
        ACR[Azure Container<br/>Registry]
        SQL[(Azure SQL<br/>Database)]
        KV[Azure Key Vault]
        AI[Application Insights]
        LA[Log Analytics<br/>Workspace]
        MI[Managed Identity]
    end
    
    Users[Users] --> FE
    FE --> BE
    BE --> SQL
    BE --> KV
    FE --> ACR
    BE --> ACR
    MI --> ACR
    MI --> KV
    FE --> AI
    BE --> AI
    AI --> LA
```

**Data Flow:**
- Users access the React frontend via HTTPS
- Frontend communicates with .NET API backend via REST calls
- Backend connects to Azure SQL Database for data persistence
- Container images are pulled from Azure Container Registry
- Secrets and connection strings stored securely in Key Vault
- All telemetry flows to Application Insights and Log Analytics

## **Recommended Azure Resources**

**Application: LearnerCenter Frontend**
- **Hosting Service Type**: Azure Container Apps
- **SKU**: Consumption plan (0.5 vCPU, 1Gi memory) - Autoscaling 0-10 replicas
- **Configuration**:
  - Language: Node.js 18 (React TypeScript build)
  - DockerfilePath: `/frontend/Dockerfile`
  - DockerContext: `/frontend`
  - Environment Variables: 
    - `REACT_APP_API_URL`: Backend API URL
    - `NODE_ENV`: production

**Application: LearnerCenter Backend API**
- **Hosting Service Type**: Azure Container Apps  
- **SKU**: Consumption plan (1 vCPU, 2Gi memory) - Autoscaling 0-10 replicas
- **Configuration**:
  - Language: .NET 9.0
  - DockerfilePath: `/backend/Dockerfile`
  - DockerContext: `/backend`
  - Environment Variables:
    - `ASPNETCORE_ENVIRONMENT`: Production
    - `ConnectionStrings__DefaultConnection`: @Microsoft.KeyVault(SecretUri=...)
    - `CORS__AllowedOrigins`: Frontend URL

**Dependencies:**
- **Azure SQL Database**
  - SKU: Basic (5 DTU) - Good for development/testing
  - Service Type: Azure SQL Database
  - Connection Type: Connection string via Key Vault
  - Environment Variables: `ConnectionStrings__DefaultConnection`

**Supporting Services:**
- **Application Insights**: Application performance monitoring
- **Log Analytics Workspace**: Centralized logging for all services
- **Key Vault**: Store database connection strings and secrets securely
- **Container Registry**: Store and manage Docker images

**Security Configurations:**
- **User Managed Identity**: Assigned to both container apps
- **AcrPull Role Assignment**: Managed identity has AcrPull role on container registry
- **Key Vault Access**: Managed identity has Key Vault secrets read permissions
- **SQL Database**: Firewall rules to allow Azure services

## **Execution Steps**

> **Below are the steps for deployment:**

### **Phase 1: Quick Setup with Azure Developer CLI (Recommended - Fastest)**

1. **Initialize Azure Developer CLI Project**
   - Run `azd init` in project root
   - Select "Container Apps" template
   - Configure for .NET backend and React frontend

2. **Create Dockerfiles**
   - Backend: Multi-stage .NET Dockerfile
   - Frontend: Node.js build + nginx Dockerfile

3. **Configure Infrastructure**
   - Generate Bicep templates via `azd`
   - Add SQL Database, Key Vault resources
   - Configure managed identity and RBAC

4. **Deploy Everything**
   - Run `azd up` - provisions infrastructure and deploys code
   - Automatically builds containers, pushes to ACR, deploys to Container Apps

### **Phase 2: Alternative - Manual Container Apps Deployment**

1. **Create Docker Images Locally**
2. **Deploy via Azure Portal or CLI**
3. **Configure Database Connection**
4. **Set up Custom Domain (Optional)**

## **Estimated Timeline**
- **AZD Route**: 30-60 minutes end-to-end
- **Manual Route**: 2-3 hours

## **Next Steps**
1. Choose deployment method (AZD recommended)
2. Create necessary Dockerfiles
3. Set up database migration strategy
4. Execute deployment plan
5. Configure custom domain and SSL (optional)

Would you like me to proceed with the **Azure Developer CLI (azd)** approach for the fastest deployment?